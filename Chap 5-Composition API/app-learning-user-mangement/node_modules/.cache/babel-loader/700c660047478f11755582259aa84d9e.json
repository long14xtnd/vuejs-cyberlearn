{"ast":null,"code":"import { getAllUserApi } from \"../../apis/user\";\n\nconst state = () => {\n  return {\n    searchName: \"\"\n  };\n};\n\nconst getters = {\n  userListByBoy(state) {\n    return state.userList.filter(user => user.gender === \"Nam\");\n  },\n\n  /**\r\n   * \r\n   * tìm kiếm user theo Tên\r\n   * đầu tiên từ biến state hệ thống ta lấy ra được searchName và userList\r\n   * tiếp theo kiểm tra xem searchName có nằm trong userList hay không,sử dụng includes\r\n   * toLowercase chỉ có tác dụng là biến chữ hoa thành chữ thường\r\n   * \r\n   */\n  userListBySearchName(state) {\n    const {\n      userList,\n      searchName\n    } = state;\n    return userList.filter(user => user.name.toLowerCase().includes(searchName.toLowerCase()));\n  }\n\n};\nconst mutations = {\n  setUserListMutation(state, payload) {\n    state.userList = payload;\n  },\n\n  setSearchNameMutation(state, payload) {\n    state.searchName = payload;\n  },\n\n  addUserMutation(state, payload) {\n    // state.userList = [...state.userList, payload];\n    state.userList.push(payload);\n  },\n\n  removeUserMutation(context, payload) {\n    // Hàm findIndex sẽ trả về key của phần tử đầu tiên trong mảng thỏa mãn được điều kiện kiểm tra(được truyền vào như một hàm).\n    const index = context.userList.findIndex(user => user.id === payload);\n\n    if (index !== -1) {\n      context.userList.splice(index, 1);\n    } else {\n      alert('Không tìm thấy id phù hợp');\n    }\n  },\n\n  updateUserMutation(context, payload) {\n    const index = context.userList.findIndex(user => user.id === payload.id);\n\n    if (index !== -1) {\n      context.userList[index] = payload;\n    } else {\n      alert('Không tìm thấy user phù hợp');\n    }\n  }\n\n};\nconst actions = {\n  async getAllUserAction(context) {\n    const payload = await getAllUserApi();\n    context.commit(\"setUserListMutation\", payload);\n  },\n\n  setSearchNameAction(context, payload) {\n    //context ở đây hiểu như $this.store.state vậy\n    setTimeout(() => {\n      context.commit(\"setSearchNameMutation\", payload);\n    }, 500);\n  },\n\n  addUserAction(context, payload) {\n    // console.log(context);\n    // console.log(payload);\n    const newUser = { ...payload,\n      id: Math.random()\n    };\n    context.commit(\"addUserMutation\", newUser);\n  },\n\n  removeUserAction(context, payload) {\n    // console.log(context);\n    // console.log(payload);\n    context.commit(\"removeUserMutation\", payload);\n  },\n\n  updateUserAction(state, payload) {\n    state.commit(\"updateUserMutation\", payload);\n  }\n\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"sources":["C:/Users/long.dh/Desktop/learn-vue3/vuejs-cyberlearn/Chap 3-VueX-Form/app-learning-user-mangement/src/store/modules/user.js"],"names":["getAllUserApi","state","searchName","getters","userListByBoy","userList","filter","user","gender","userListBySearchName","name","toLowerCase","includes","mutations","setUserListMutation","payload","setSearchNameMutation","addUserMutation","push","removeUserMutation","context","index","findIndex","id","splice","alert","updateUserMutation","actions","getAllUserAction","commit","setSearchNameAction","setTimeout","addUserAction","newUser","Math","random","removeUserAction","updateUserAction","namespaced"],"mappings":"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","sourcesContent":["import { getAllUserApi } from \"../../apis/user\";\r\nconst state = () => {\r\n    return {\r\n\r\n        searchName: \"\"\r\n\r\n    }\r\n\r\n};\r\nconst getters = {\r\n    userListByBoy(state) {\r\n        return state.userList.filter((user) => user.gender === \"Nam\");\r\n\r\n    },\r\n    /**\r\n     * \r\n     * tìm kiếm user theo Tên\r\n     * đầu tiên từ biến state hệ thống ta lấy ra được searchName và userList\r\n     * tiếp theo kiểm tra xem searchName có nằm trong userList hay không,sử dụng includes\r\n     * toLowercase chỉ có tác dụng là biến chữ hoa thành chữ thường\r\n     * \r\n     */\r\n    userListBySearchName(state) {\r\n        const { userList, searchName } = state;\r\n        return userList.filter(\r\n            (user) => user.name.toLowerCase().includes(searchName.toLowerCase())\r\n        )\r\n\r\n    }\r\n};\r\nconst mutations = {\r\n    setUserListMutation(state, payload) {\r\n        state.userList = payload;\r\n    },\r\n    setSearchNameMutation(state, payload) {\r\n        state.searchName = payload;\r\n    },\r\n    addUserMutation(state, payload) {\r\n        // state.userList = [...state.userList, payload];\r\n        state.userList.push(payload);\r\n    },\r\n    removeUserMutation(context, payload) {\r\n\r\n\r\n        // Hàm findIndex sẽ trả về key của phần tử đầu tiên trong mảng thỏa mãn được điều kiện kiểm tra(được truyền vào như một hàm).\r\n        const index = context.userList.findIndex(user => user.id === payload);\r\n        if (index !== -1) {\r\n            context.userList.splice(index, 1);\r\n        } else {\r\n            alert('Không tìm thấy id phù hợp')\r\n        }\r\n\r\n    },\r\n    updateUserMutation(context, payload) {\r\n        const index = context.userList.findIndex(user => user.id === payload.id);\r\n        if (index !== -1) {\r\n            context.userList[index] = payload;\r\n        } else {\r\n            alert('Không tìm thấy user phù hợp')\r\n        }\r\n    }\r\n\r\n};\r\nconst actions = {\r\n    async getAllUserAction(context) {\r\n        const payload = await getAllUserApi();\r\n        context.commit(\"setUserListMutation\", payload)\r\n    },\r\n    setSearchNameAction(context, payload) {\r\n        //context ở đây hiểu như $this.store.state vậy\r\n        setTimeout(() => {\r\n            context.commit(\"setSearchNameMutation\", payload)\r\n        }, 500)\r\n\r\n    },\r\n    addUserAction(context, payload) {\r\n        // console.log(context);\r\n        // console.log(payload);\r\n\r\n        const newUser = {...payload, id: Math.random() }\r\n        context.commit(\"addUserMutation\", newUser);\r\n    },\r\n    removeUserAction(context, payload) {\r\n        // console.log(context);\r\n        // console.log(payload);\r\n        context.commit(\"removeUserMutation\", payload);\r\n    },\r\n    updateUserAction(state, payload) {\r\n        state.commit(\"updateUserMutation\", payload)\r\n    }\r\n};\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state,\r\n    getters,\r\n    mutations,\r\n    actions,\r\n}"]},"metadata":{},"sourceType":"module"}